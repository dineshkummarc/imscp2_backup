#!/usr/bin/perl

# i-MSCP - internet Multi Server Control Panel
# Copyright (C) 2010 by internet Multi Server Control Panel
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
#
# @category		i-MSCP
# @copyright	2010 - 2011 by i-MSCP | http://i-mscp.net
# @author		Daniel Andreca <sci2tech@gmail.com>
# @version		SVN: $Id$
# @link			http://i-mscp.net i-MSCP Home Site
# @license      http://www.gnu.org/licenses/gpl-2.0.html GPL v2

use strict;
use warnings;


no warnings 'once';

use FindBin;

use lib "$FindBin::Bin/PerlLib";
use lib "$FindBin::Bin/PerlLib/Vendor";

require 'imscp-common-code.pl';
use iMSCP::Debug;
use iMSCP::Scheduler;

sub imscp_rqst_init {
	debug((caller(0))[3].': Starting...');

	umask(027);

	use iMSCP::Bootstrap;
	iMSCP::Bootstrap->new(mode => 'normal');

	debug((caller(0))[3].': Ending...');

	0;
}

sub imscp_rqst_clean {
	debug((caller(0))[3].': Starting...');
	debug((caller(0))[3].': Ending...');
	0;
}
sub imscp_rqst_action{
	my $rv		= 0;
	debug((caller(0))[3].': Starting...');
	my $sql = "SELECT * FROM `scheduled_task` WHERE `status` = ?";
	my $data = iMSCP::Database::Database->getInstance()->doQuery('id', $sql, 'scheduled');
	if(ref $data eq "HASH"){
		debug("Trying to schedule processing for " . keys(%$data) . " users(s)");
		#use Data::Dumper;
		#debug Dumper $data;
		iMSCP::Scheduler->new()->addAction($data) if(keys(%$data) >0 );
	} else {
		error($data);
		$rv	= 1;
	}
	debug((caller(0))[3].': Ending...');
	$rv;
}

sub imscp_rqst_dispatch {
	debug((caller(0))[3].': Starting...');

	my $rs = 0;
	$rs |= imscp_rqst_action();

	debug((caller(0))[3].': Ending...');

	$rs;
}

if (imscp_rqst_init()) {
	imscp_rqst_clean();
	exit 1;
}

if (imscp_rqst_dispatch()) {
	imscp_rqst_clean();
	exit 1;
}

if (imscp_rqst_clean()) {
	exit 1;
}
iMSCP::Scheduler->new()->processActions();


0;

